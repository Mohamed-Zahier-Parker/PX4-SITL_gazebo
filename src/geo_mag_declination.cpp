/****************************************************************************
 *
 *   Copyright (c) 2014 MAV GEO Library (MAVGEO). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name MAVGEO nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/**
* @file geo_mag_declination.cpp
*
* Calculation / lookup table for Earth's magnetic field declination (deg), inclination (deg) and strength (centi-Tesla).
* Data generated by https://www.ngdc.noaa.gov/geomag-web/#igrfgrid IGRF calculator on 22 Jan 2018
*
* XXX Lookup table currently too coarse in resolution (only full degrees)
* and lat/lon res - needs extension medium term.
*
*/

#include <cstdint>
#include <cmath>

#include "common.h"
#include "geo_mag_declination.h"

/** set this always to the sampling in degrees for the table below */
#define SAMPLING_RES		10.0f
#define SAMPLING_MIN_LAT	-60.0f
#define SAMPLING_MAX_LAT	60.0f
#define SAMPLING_MIN_LON	-180.0f
#define SAMPLING_MAX_LON	180.0f
#define SAMPLING_RES_SA		1.0f
#define SAMPLING_MIN_LAT_SA	-35.0f
#define SAMPLING_MAX_LAT_SA	-22.0f
#define SAMPLING_MIN_LON_SA	15.0f
#define SAMPLING_MAX_LON_SA	34.0f

// declination data in degrees
static constexpr const int8_t declination_table[13][37] = \
{
	{ 47,46,45,43,42,41,39,37,33,29,23,16,10,4,-1,-6,-10,-15,-20,-27,-34,-42,-49,-56,-62,-67,-72,-74,-75,-73,-61,-22,26,42,47,48,47 },
	{ 31,31,31,30,30,30,30,29,27,24,18,11,3,-4,-9,-13,-15,-18,-21,-27,-33,-40,-47,-52,-56,-57,-56,-52,-44,-30,-14,2,14,22,27,30,31 },
	{ 22,23,23,23,22,22,22,23,22,19,13,5,-4,-12,-17,-20,-22,-22,-23,-25,-30,-36,-41,-45,-46,-44,-39,-31,-21,-11,-3,4,10,15,19,21,22 },
	{ 17,17,17,18,17,17,17,17,16,13,8,-1,-10,-18,-22,-25,-26,-25,-22,-20,-21,-25,-29,-32,-31,-28,-23,-16,-9,-3,0,4,7,11,14,16,17 },
	{ 13,13,14,14,14,13,13,12,11,9,3,-5,-14,-20,-24,-25,-24,-21,-17,-12,-9,-11,-14,-17,-18,-16,-12,-8,-3,-0,1,3,6,8,11,12,13 },
	{ 11,11,11,11,11,10,10,10,9,6,-0,-8,-15,-21,-23,-22,-19,-15,-10,-5,-2,-2,-4,-7,-9,-8,-7,-4,-1,1,1,2,4,7,9,10,11 },
	{ 10,9,9,9,9,9,9,8,7,3,-3,-10,-16,-20,-20,-18,-14,-9,-5,-2,1,2,0,-2,-4,-4,-3,-2,-0,0,0,1,3,5,7,9,10 },
	{ 9,9,9,9,9,9,9,8,6,1,-4,-11,-16,-18,-17,-14,-10,-5,-2,-0,2,3,2,0,-1,-2,-2,-1,-0,-1,-1,-1,1,3,6,8,9 },
	{ 8,9,9,10,10,10,10,8,5,0,-6,-12,-15,-16,-15,-11,-7,-4,-1,1,3,4,3,2,1,0,-0,-0,-1,-2,-3,-4,-2,0,3,6,8 },
	{ 7,9,10,11,12,12,12,9,5,-1,-7,-13,-15,-15,-13,-10,-6,-3,0,2,3,4,4,4,3,2,1,0,-1,-3,-5,-6,-6,-3,0,4,7 },
	{ 5,8,11,13,14,15,14,11,5,-2,-9,-15,-17,-16,-13,-10,-6,-3,0,3,4,5,6,6,6,5,4,2,-1,-5,-8,-9,-9,-6,-3,1,5 },
	{ 3,8,11,15,17,17,16,12,5,-4,-12,-18,-19,-18,-16,-12,-8,-4,-0,3,5,7,9,10,10,9,7,4,-1,-6,-10,-12,-12,-9,-5,-1,3 },
	{ 3,8,12,16,19,20,18,13,4,-8,-18,-24,-25,-23,-20,-16,-11,-6,-1,3,7,11,14,16,17,17,14,8,-0,-8,-13,-15,-14,-11,-7,-2,3 },
};

static constexpr const float_t declination_SA_table[14][20] = \
{
	{-24.97372,-25.39537,-25.83990,-26.30485,-26.78762,-27.28559,-27.79610,-28.31652,-28.84425,-29.37681,-29.91181,-30.44691,-30.98000,-31.50905,-32.03214,-32.54749,-33.05345,-33.54847,-34.03115,-34.50016},
	{-24.18297,-24.56869,-24.97926,-25.41221,-25.86496,-26.33481,-26.81908,-27.31506,-27.82009,-28.33158,-28.84703,-29.36403,-29.88032,-30.39378,-30.90240,-31.40426,-31.89760,-32.38079,-32.85228,-33.31067},
	{-23.32455,-23.67236,-24.04703,-24.44618,-24.86717,-25.30736,-25.76399,-26.23434,-26.71565,-27.20526,-27.70057,-28.19907,-28.69840,-29.19633,-29.69071,-30.17956,-30.66095,-31.13313,-31.59446,-32.04339},
	{-22.40129,-22.70941,-23.04648,-23.41011,-23.79779,-24.20684,-24.63452,-25.07806,-25.53468,-26.00162,-26.47621,-26.95588,-27.43813,-27.92061,-28.40105,-28.87735,-29.34748,-29.80953,-30.26174,-30.70243},
	{-21.41799,-21.68497,-21.98294,-22.30964,-22.66260,-23.03920,-23.43673,-23.85240,-24.28341,-24.72695,-25.18029,-25.64074,-26.10574,-26.57280,-27.03958,-27.50378,-27.96331,-28.41608,-28.86018,-29.29383},
	{-20.38149,-20.60628,-20.86401,-21.15258,-21.46966,-21.81271,-22.17903,-22.56587,-22.97043,-23.38987,-23.82141,-24.26228,-24.70985,-25.16149,-25.61476,-26.06728,-26.51673,-26.96099,-27.39795,-27.82566},
	{-19.30063,-19.48258,-19.69934,-19.94898,-20.22931,-20.53788,-20.87212,-21.22928,-21.60662,-22.00130,-22.41049,-22.83140,-23.26128,-23.69742,-24.13728,-24.57838,-25.01822,-25.45453,-25.88514,-26.30787},
	{-18.18587,-18.32486,-18.50037,-18.71065,-18.95368,-19.22717,-19.52864,-19.85547,-20.20493,-20.57424,-20.96055,-21.36103,-21.77289,-22.19335,-22.61976,-23.04949,-23.47998,-23.90878,-24.33357,-24.75204},
	{-17.04893,-17.14539,-17.27985,-17.45079,-17.65636,-17.89447,-18.16279,-18.45880,-18.77986,-19.12325,-19.48614,-19.86572,-20.25915,-20.66361,-21.07633,-21.49459,-21.91576,-22.33721,-22.75648,-23.17114},
	{-15.90228,-15.95720,-16.05133,-16.18339,-16.35176,-16.55453,-16.78955,-17.05449,-17.34679,-17.66381,-18.00281,-18.36099,-18.73550,-19.12350,-19.52215,-19.92865,-20.34028,-20.75427,-21.16804,-21.57900},
	{-14.75851,-14.77341,-14.82842,-14.92253,-15.05434,-15.22219,-15.42411,-15.65794,-15.92130,-16.21166,-16.52635,-16.86264,-17.21771,-17.58870,-17.97275,-18.36699,-18.76862,-19.17477,-19.58275,-19.98983},
	{-13.62974,-13.60662,-13.62420,-13.68172,-13.77804,-13.91173,-14.08105,-14.28404,-14.51849,-14.78202,-15.07209,-15.38604,-15.72112,-16.07448,-16.44327,-16.82461,-17.21559,-17.61329,-18.01491,-18.41761},
	{-12.52710,-12.46838,-12.45062,-12.47331,-12.53557,-12.63622,-12.77375,-12.94642,-13.15222,-13.38895,-13.65421,-13.94547,-14.26005,-14.59517,-14.94800,-15.31563,-15.69515,-16.08360,-16.47807,-16.87564},
	{-11.46030,-11.36873,-11.31806,-11.30802,-11.33798,-11.40700,-11.51385,-11.65699,-11.83465,-12.04481,-12.28525,-12.55357,-12.84722,-13.16351,-13.49965,-13.85277,-14.21993,-14.59817,-14.98452,-15.37599},
};

// Magnetic declination data in radians * 10^-4
static constexpr const int16_t declination_table_ecl[13][37] {
//    LONGITUDE:   -180,  -170,  -160,  -150,  -140,  -130,  -120,  -110,  -100,   -90,   -80,   -70,   -60,   -50,   -40,   -30,   -20,   -10,     0,    10,    20,    30,    40,    50,    60,    70,    80,    90,   100,   110,   120,   130,   140,   150,   160,   170,   180,
/* LAT: -60 */ {   8375,  8139,  7867,  7601,  7355,  7108,  6806,  6378,  5768,  4952,  3954,  2842,  1719,   685,  -205,  -969, -1699, -2516, -3508, -4692, -6012, -7374, -8691, -9902,-10968,-11869,-12588,-13084,-13256,-12806,-10720, -3613,  4760,  7561,  8359,  8500,  8375, },
/* LAT: -50 */ {   5450,  5491,  5441,  5358,  5291,  5259,  5230,  5108,  4770,  4114,  3110,  1841,   497,  -694, -1581, -2161, -2566, -3002, -3670, -4660, -5884, -7151, -8291, -9198, -9806,-10057, -9876, -9132, -7634, -5282, -2383,   363,  2471,  3894,  4768,  5244,  5450, },
/* LAT: -40 */ {   3929,  4024,  4037,  3998,  3944,  3915,  3924,  3917,  3749,  3223,  2211,   777,  -790, -2118, -3002, -3473, -3672, -3739, -3895, -4430, -5375, -6439, -7328, -7880, -8005, -7647, -6775, -5398, -3683, -1973,  -507,   716,  1757,  2618,  3270,  3698,  3929, },
/* LAT: -30 */ {   2962,  3049,  3085,  3078,  3026,  2953,  2897,  2866,  2743,  2274,  1254,  -254, -1864, -3134, -3895, -4259, -4356, -4167, -3737, -3482, -3801, -4530, -5236, -5605, -5500, -4932, -3983, -2774, -1554,  -598,    85,   687,  1307,  1904,  2407,  2765,  2962, },
/* LAT: -20 */ {   2319,  2367,  2392,  2402,  2367,  2278,  2176,  2102,  1959,  1472,   433, -1044, -2527, -3608, -4165, -4302, -4118, -3581, -2728, -1909, -1595, -1923, -2571, -3053, -3107, -2762, -2133, -1312,  -525,   -25,   244,   548,   984,  1454,  1869,  2170,  2319, },
/* LAT: -10 */ {   1926,  1921,  1908,  1913,  1892,  1815,  1712,  1625,  1442,   899,  -148, -1518, -2799, -3650, -3945, -3741, -3181, -2408, -1561,  -795,  -311,  -321,  -779, -1289, -1514, -1433, -1124,  -622,  -116,   135,   191,   354,   719,  1147,  1531,  1811,  1926, },
/* LAT:   0 */ {   1713,  1682,  1633,  1632,  1629,  1567,  1471,  1364,  1112,   497,  -535, -1760, -2826, -3435, -3462, -2982, -2222, -1438,  -780,  -238,   183,   310,    44,  -372,  -635,  -695,  -597,  -332,   -35,    62,     9,   101,   436,   867,  1277,  1589,  1713, },
/* LAT:  10 */ {   1581,  1591,  1555,  1578,  1610,  1568,  1456,  1277,   904,   188,  -829, -1909, -2750, -3111, -2930, -2338, -1565,  -848,  -325,    61,   389,   547,   396,    75,  -164,  -273,  -293,  -207,   -98,  -133,  -266,  -236,    60,   503,   975,  1375,  1581, },
/* LAT:  20 */ {   1405,  1555,  1620,  1716,  1808,  1794,  1647,  1352,   810,   -46, -1090, -2050, -2663, -2792, -2480, -1887, -1177,  -523,   -55,   260,   521,   673,   590,   348,   145,    28,   -57,  -116,  -190,  -375,  -607,  -665,  -436,     3,   537,  1050,  1405, },
/* LAT:  30 */ {   1115,  1482,  1744,  1970,  2133,  2148,  1966,  1549,   824,  -206, -1331, -2222, -2653, -2606, -2217, -1642,  -988,  -366,   103,   414,   648,   800,   786,   639,   488,   364,   214,    12,  -263,  -634, -1001, -1162, -1008,  -588,   -15,   593,  1115, },
/* LAT:  40 */ {    770,  1358,  1852,  2244,  2493,  2539,  2326,  1796,   885,  -348, -1599, -2483, -2819, -2677, -2236, -1646,  -993,  -361,   155,   525,   800,  1004,  1104,  1096,  1020,   874,   614,   215,  -315,  -918, -1441, -1690, -1579, -1166,  -568,   108,   770, },
/* LAT:  50 */ {    495,  1244,  1924,  2478,  2843,  2948,  2718,  2062,   916,  -594, -2035, -2968, -3273, -3087, -2599, -1954, -1243,  -542,    79,   590,  1013,  1374,  1661,  1836,  1859,  1678,  1245,   551,  -332, -1234, -1920, -2215, -2096, -1655, -1015,  -276,   495, },
/* LAT:  60 */ {    320,  1177,  1983,  2674,  3173,  3379,  3158,  2336,   802, -1187, -2929, -3922, -4178, -3917, -3342, -2593, -1763,  -918,  -105,   651,  1347,  1983,  2532,  2935,  3104,  2930,  2310,  1214,  -189, -1513, -2395, -2715, -2553, -2054, -1351,  -539,   320, },
};

// inclination data in degrees
static constexpr const int8_t inclination_table[13][37] = \
{
	{ -78,-76,-74,-72,-70,-68,-65,-63,-60,-57,-55,-54,-54,-55,-56,-57,-58,-59,-59,-59,-59,-60,-61,-63,-66,-69,-73,-76,-79,-83,-86,-87,-86,-84,-82,-80,-78 },
	{ -72,-70,-68,-66,-64,-62,-60,-57,-54,-51,-49,-48,-49,-51,-55,-58,-60,-61,-61,-61,-60,-60,-61,-63,-66,-69,-72,-76,-78,-80,-81,-80,-79,-77,-76,-74,-72 },
	{ -64,-62,-60,-59,-57,-55,-53,-50,-47,-44,-41,-41,-43,-47,-53,-58,-62,-65,-66,-65,-63,-62,-61,-63,-65,-68,-71,-73,-74,-74,-73,-72,-71,-70,-68,-66,-64 },
	{ -55,-53,-51,-49,-46,-44,-42,-40,-37,-33,-30,-30,-34,-41,-48,-55,-60,-65,-67,-68,-66,-63,-61,-61,-62,-64,-65,-66,-66,-65,-64,-63,-62,-61,-59,-57,-55 },
	{ -42,-40,-37,-35,-33,-30,-28,-25,-22,-18,-15,-16,-22,-31,-40,-48,-55,-59,-62,-63,-61,-58,-55,-53,-53,-54,-55,-55,-54,-53,-51,-51,-50,-49,-47,-45,-42 },
	{ -25,-22,-20,-17,-15,-12,-10,-7,-3,1,3,2,-5,-16,-27,-37,-44,-48,-50,-50,-48,-44,-41,-38,-38,-38,-39,-39,-38,-37,-36,-35,-35,-34,-31,-28,-25 },
	{ -5,-2,1,3,5,8,10,13,16,20,21,19,12,2,-10,-20,-27,-30,-30,-29,-27,-23,-19,-17,-17,-17,-18,-18,-17,-16,-16,-16,-16,-15,-12,-9,-5 },
	{ 15,18,21,22,24,26,29,31,34,36,37,34,28,20,10,2,-3,-5,-5,-4,-2,2,5,7,8,7,7,6,7,7,7,6,5,6,8,11,15 },
	{ 31,34,36,38,39,41,43,46,48,49,49,46,42,36,29,24,20,19,20,21,23,25,28,30,30,30,29,29,29,29,28,27,25,25,26,28,31 },
	{ 43,45,47,49,51,53,55,57,58,59,59,56,53,49,45,42,40,40,40,41,43,44,46,47,47,47,47,47,47,47,46,44,42,41,40,42,43 },
	{ 53,54,56,57,59,61,64,66,67,68,67,65,62,60,57,55,55,54,55,56,57,58,59,59,60,60,60,60,60,60,59,57,55,53,52,52,53 },
	{ 62,63,64,65,67,69,71,73,75,75,74,73,70,68,67,66,65,65,65,66,66,67,68,68,69,70,70,71,71,70,69,67,65,63,62,62,62 },
	{ 71,71,72,73,75,77,78,80,81,81,80,79,77,76,74,73,73,73,73,73,73,74,74,75,76,77,78,78,78,78,77,75,73,72,71,71,71 },
};

static constexpr const float_t inclination_SA_table[14][20] = \
{
	{-65.74661,-65.52033,-65.28507,-65.04251,-64.79437,-64.54244,-64.28851,-64.03439,-63.78190,-63.53283,-63.28895,-63.05195,-62.82351,-62.60519,-62.39848,-62.20476,-62.02529,-61.86121,-61.71356,-61.58321},
	{-66.03543,-65.80800,-65.57026,-65.32387,-65.07057,-64.81211,-64.55033,-64.28705,-64.02413,-63.76339,-63.50668,-63.25576,-63.01237,-62.77817,-62.55475,-62.34358,-62.14603,-61.96337,-61.79671,-61.64705},
	{-66.27224,-66.04458,-65.80532,-65.55613,-65.29869,-65.03477,-64.76619,-64.49480,-64.22246,-63.95107,-63.68247,-63.41851,-63.16100,-62.91168,-62.67222,-62.44421,-62.22910,-62.02826,-61.84293,-61.67421},
	{-66.45035,-66.22320,-65.98328,-65.73215,-65.47151,-65.20309,-64.92869,-64.65020,-64.36947,-64.08839,-63.80888,-63.53283,-63.26211,-62.99852,-62.74380,-62.49965,-62.26762,-62.04918,-61.84566,-61.65828},
	{-66.56341,-66.33736,-66.09741,-65.84510,-65.58206,-65.31000,-65.03072,-64.74605,-64.45787,-64.16810,-63.87866,-63.59147,-63.30845,-63.03148,-62.76239,-62.50290,-62.25471,-62.01935,-61.79826,-61.59278},
	{-66.60547,-66.38094,-66.14146,-65.88852,-65.62373,-65.34879,-65.06541,-64.77543,-64.48070,-64.18315,-63.88472,-63.58735,-63.29301,-63.00359,-62.72102,-62.44711,-62.18358,-61.93210,-61.69420,-61.47130},
	{-66.57122,-66.34840,-66.10969,-65.85656,-65.59054,-65.31328,-65.02647,-64.73189,-64.43142,-64.12696,-63.82043,-63.51382,-63.20909,-62.90819,-62.61308,-62.32568,-62.04775,-61.78103,-61.52718,-61.28768},
	{-66.45591,-66.23482,-65.99705,-65.74396,-65.47705,-65.19792,-64.90820,-64.60967,-64.30413,-63.99352,-63.67974,-63.36474,-63.05054,-62.73911,-62.43246,-62.13251,-61.84114,-61.56014,-61.29126,-61.03606},
	{-66.25550,-66.03604,-65.79918,-65.54625,-65.27864,-64.99793,-64.70572,-64.40373,-64.09374,-63.77763,-63.45730,-63.13473,-62.81192,-62.49087,-62.17359,-61.86207,-61.55825,-61.26398,-60.98105,-60.71113},
	{-65.96672,-65.74866,-65.51256,-65.25975,-64.99153,-64.70940,-64.41496,-64.10988,-63.79589,-63.47484,-63.14862,-62.81919,-62.48856,-62.15873,-61.83173,-61.50959,-61.19431,-60.88775,-60.59179,-60.30816},
	{-65.58707,-65.37004,-65.13448,-64.88162,-64.61273,-64.32925,-64.03274,-63.72481,-63.40718,-63.08163,-62.75006,-62.41441,-62.07666,-61.73883,-61.40297,-61.07110,-60.74529,-60.42742,-60.11945,-59.82314},
	{-65.11475,-64.89835,-64.66299,-64.40984,-64.14015,-63.85529,-63.55676,-63.24614,-62.92510,-62.59541,-62.25893,-61.91758,-61.57333,-61.22817,-60.88419,-60.54347,-60.20801,-59.87977,-59.56077,-59.25281},
	{-64.54869,-64.33247,-64.09692,-63.84321,-63.57251,-63.28615,-62.98558,-62.67234,-62.34805,-62.01447,-61.67341,-61.32677,-60.97652,-60.62467,-60.27327,-59.92440,-59.58011,-59.24242,-58.91333,-58.59470},
	{-63.88845,-63.67194,-63.43583,-63.18122,-62.90925,-62.62123,-62.31854,-62.00267,-61.67521,-61.33790,-60.99252,-60.64094,-60.28513,-59.92709,-59.56887,-59.21253,-58.86015,-58.51380,-58.17548,-57.84709},
};

// Magnetic inclination data in radians * 10^-4
static constexpr const int16_t inclination_table_ecl[13][37] {
//    LONGITUDE:   -180,  -170,  -160,  -150,  -140,  -130,  -120,  -110,  -100,   -90,   -80,   -70,   -60,   -50,   -40,   -30,   -20,   -10,     0,    10,    20,    30,    40,    50,    60,    70,    80,    90,   100,   110,   120,   130,   140,   150,   160,   170,   180,
/* LAT: -60 */ { -13525,-13173,-12835,-12503,-12159,-11787,-11371,-10916,-10446,-10013, -9679, -9499, -9492, -9626, -9831,-10028,-10160,-10211,-10203,-10191,-10237,-10391,-10675,-11078,-11572,-12126,-12711,-13307,-13895,-14456,-14953,-15244,-15075,-14693,-14289,-13897,-13525, },
/* LAT: -50 */ { -12498,-12158,-11829,-11507,-11184,-10837,-10438, -9965, -9434, -8909, -8513, -8378, -8570, -9026, -9591,-10109,-10479,-10655,-10637,-10493,-10350,-10349,-10559,-10966,-11502,-12092,-12679,-13220,-13668,-13968,-14078,-14006,-13803,-13520,-13193,-12847,-12498, },
/* LAT: -40 */ { -11240,-10895,-10550,-10206, -9866, -9527, -9165, -8738, -8215, -7647, -7212, -7155, -7600, -8416, -9339,-10175,-10844,-11293,-11451,-11301,-10965,-10687,-10665,-10934,-11389,-11893,-12342,-12670,-12833,-12840,-12749,-12610,-12430,-12197,-11911,-11584,-11240, },
/* LAT: -30 */ {  -9601, -9228, -8853, -8464, -8071, -7694, -7335, -6941, -6426, -5812, -5349, -5410, -6156, -7347, -8600, -9704,-10627,-11351,-11771,-11784,-11428,-10921,-10575,-10562,-10806,-11127,-11388,-11508,-11450,-11274,-11097,-10958,-10809,-10600,-10319, -9975, -9601, },
/* LAT: -20 */ {  -7369, -6938, -6528, -6103, -5658, -5226, -4831, -4412, -3842, -3153, -2691, -2922, -4002, -5600, -7232, -8616, -9697,-10489,-10948,-11003,-10657,-10051, -9488, -9233, -9274, -9435, -9580, -9604, -9435, -9162, -8963, -8869, -8757, -8546, -8229, -7820, -7369, },
/* LAT: -10 */ {  -4411, -3889, -3445, -3013, -2556, -2104, -1685, -1221,  -587,   124,   503,   108, -1188, -3088, -5069, -6700, -7820, -8475, -8757, -8710, -8317, -7645, -6980, -6625, -6580, -6673, -6793, -6821, -6636, -6338, -6177, -6174, -6122, -5900, -5517, -4994, -4411, },
/* LAT:   0 */ {   -901,  -294,   160,   557,   974,  1392,  1787,  2242,  2838,  3426,  3645,  3177,  1911,    20, -2028, -3703, -4741, -5192, -5265, -5106, -4680, -3977, -3272, -2893, -2830, -2902, -3030, -3105, -2977, -2739, -2676, -2804, -2850, -2657, -2233, -1610,  -901, },
/* LAT:  10 */ {   2566,  3178,  3602,  3938,  4291,  4659,  5016,  5414,  5878,  6258,  6308,  5840,  4780,  3230,  1538,   143,  -687,  -956,  -877,  -649,  -249,   379,  1012,  1354,  1416,  1366,  1263,  1171,  1215,  1322,  1255,  1004,   828,   908,  1259,  1854,  2566, },
/* LAT:  20 */ {   5419,  5937,  6310,  6601,  6914,  7258,  7605,  7961,  8305,  8514,  8437,  7988,  7166,  6078,  4951,  4030,  3484,  3350,  3489,  3727,  4051,  4509,  4968,  5225,  5280,  5257,  5205,  5149,  5140,  5127,  4960,  4640,  4353,  4269,  4440,  4858,  5419, },
/* LAT:  30 */ {   7569,  7938,  8252,  8533,  8841,  9190,  9551,  9898, 10182, 10302, 10165,  9752,  9130,  8420,  7756,  7238,  6937,  6885,  7020,  7227,  7469,  7764,  8051,  8225,  8280,  8289,  8288,  8279,  8260,  8182,  7966,  7621,  7272,  7055,  7038,  7230,  7569, },
/* LAT:  40 */ {   9266,  9485,  9740, 10025, 10352, 10715, 11086, 11429, 11686, 11774, 11629, 11273, 10801, 10327,  9928,  9640,  9485,  9475,  9580,  9738,  9910, 10091, 10262, 10387, 10463, 10521, 10573, 10606, 10592, 10486, 10249,  9903,  9539,  9256,  9113,  9124,  9266, },
/* LAT:  50 */ {  10801, 10923, 11125, 11396, 11720, 12076, 12433, 12753, 12978, 13041, 12904, 12607, 12241, 11894, 11616, 11426, 11329, 11321, 11384, 11484, 11595, 11709, 11824, 11939, 12056, 12177, 12288, 12361, 12355, 12235, 11992, 11667, 11328, 11044, 10854, 10774, 10801, },
/* LAT:  60 */ {  12318, 12393, 12545, 12766, 13038, 13341, 13645, 13913, 14091, 14119, 13983, 13732, 13442, 13169, 12946, 12787, 12694, 12660, 12673, 12719, 12785, 12868, 12973, 13103, 13261, 13435, 13600, 13711, 13720, 13604, 13382, 13103, 12824, 12587, 12416, 12325, 12318, },
};

// strength data in centi-Tesla
static constexpr const int8_t strength_table[13][37] = \
{
	{ 62,60,58,56,54,52,49,46,43,41,38,36,34,32,31,31,30,30,30,31,33,35,38,42,46,51,55,59,62,64,66,67,67,66,65,64,62 },
	{ 59,56,54,52,50,47,44,41,38,35,32,29,28,27,26,26,26,25,25,26,28,30,34,39,44,49,54,58,61,64,65,66,65,64,63,61,59 },
	{ 54,52,49,47,45,42,40,37,34,30,27,25,24,24,24,24,24,24,24,24,25,28,32,37,42,48,52,56,59,61,62,62,62,60,59,56,54 },
	{ 49,47,44,42,40,37,35,33,30,28,25,23,22,23,23,24,25,25,26,26,26,28,31,36,41,46,51,54,56,57,57,57,56,55,53,51,49 },
	{ 43,41,39,37,35,33,32,30,28,26,25,23,23,23,24,25,26,28,29,29,29,30,32,36,40,44,48,51,52,52,51,51,50,49,47,45,43 },
	{ 38,36,35,33,32,31,30,29,28,27,26,25,24,24,25,26,28,30,31,32,32,32,33,35,38,42,44,46,47,46,45,45,44,43,41,40,38 },
	{ 34,33,32,32,31,31,31,30,30,30,29,28,27,27,27,28,29,31,32,33,33,33,34,35,37,39,41,42,43,42,41,40,39,38,36,35,34 },
	{ 33,33,32,32,33,33,34,34,35,35,34,33,32,31,30,30,31,32,33,34,35,35,36,37,38,40,41,42,42,41,40,39,37,36,34,33,33 },
	{ 34,34,34,35,36,37,39,40,41,41,40,39,37,35,35,34,35,35,36,37,38,39,40,41,42,43,44,45,45,45,43,41,39,37,35,34,34 },
	{ 37,37,38,39,41,42,44,46,47,47,46,45,43,41,40,39,39,40,41,41,42,43,45,46,47,48,49,50,50,50,48,46,43,41,39,38,37 },
	{ 42,42,43,44,46,48,50,52,53,53,52,51,49,47,45,45,44,44,45,46,46,47,48,50,51,53,54,55,56,55,54,52,49,46,44,43,42 },
	{ 48,48,49,50,52,53,55,56,57,57,56,55,53,51,50,49,48,48,48,49,49,50,51,53,55,56,58,59,60,60,58,56,54,52,50,49,48 },
	{ 54,54,54,55,56,57,58,58,59,58,58,57,56,54,53,52,51,51,51,51,52,53,54,55,57,58,60,61,62,61,61,59,58,56,55,54,54 },
};

// strength in nano-Tesla
static constexpr const float_t strength_SA_table[14][20] = \
{
	{24723.0,24822.3,24934.3,25059.6,25198.9,25352.5,25521.1,25705.0,25904.6,26120.1,26351.8,26599.9,26864.3,27145.2,27442.6,27756.3,28086.1,28431.9,28793.3,29170.0},
	{24855.8,24948.3,25053.1,25171.0,25302.6,25448.3,25608.9,25784.6,25975.9,26183.1,26406.5,26646.3,26902.5,27175.4,27464.9,27770.9,28093.3,28431.8,28786.4,29156.5},
	{25017.1,25102.9,25200.6,25311.0,25434.8,25572.5,25724.7,25891.9,26074.6,26273.1,26487.7,26718.7,26966.2,27230.4,27511.3,27808.9,28123.1,28453.7,28800.5,29163.2},
	{25205.5,25284.7,25375.4,25478.3,25594.3,25723.8,25867.5,26026.0,26199.7,26389.1,26594.5,26816.2,27054.5,27309.4,27581.1,27869.6,28174.9,28496.7,28835.0,29189.4},
	{25419.3,25492.1,25575.9,25671.5,25779.6,25900.9,26036.0,26185.6,26350.1,26530.1,26725.9,26937.9,27166.3,27411.4,27673.4,27952.1,28247.8,28560.1,28889.1,29234.5},
	{25656.8,25723.4,25800.5,25888.7,25989.0,26102.1,26228.6,26369.1,26524.3,26694.6,26880.5,27082.4,27300.6,27535.4,27787.0,28055.4,28340.8,28643.0,28962.0,29297.5},
	{25915.8,25976.5,26046.9,26128.1,26220.8,26325.6,26443.4,26574.8,26720.5,26881.0,27056.7,27248.2,27455.9,27679.9,27920.6,28178.2,28452.7,28744.2,29052.5,29377.5},
	{26194.0,26249.0,26313.2,26387.4,26472.5,26569.3,26678.5,26800.8,26936.8,27087.3,27252.8,27433.6,27630.4,27843.4,28072.9,28319.1,28582.3,28862.4,29159.4,29473.3},
	{26488.9,26538.6,26596.7,26664.3,26742.0,26830.9,26931.5,27044.7,27171.2,27311.7,27466.7,27636.7,27822.4,28024.0,28241.9,28476.5,28727.9,28996.1,29281.3,29583.5},
	{26798.0,26842.6,26895.0,26956.2,27026.8,27107.9,27200.1,27304.4,27421.4,27551.8,27696.3,27855.4,28029.8,28219.9,28426.0,28648.5,28887.8,29143.8,29416.8,29706.6},
	{27118.5,27158.4,27205.4,27260.4,27324.2,27397.7,27481.8,27577.2,27684.8,27805.2,27939.3,28087.5,28250.6,28429.0,28623.1,28833.4,29060.3,29303.7,29564.1,29841.3},
	{27447.7,27483.2,27525.1,27574.2,27631.5,27697.7,27773.8,27860.7,27959.0,28069.6,28193.3,28330.7,28482.4,28649.1,28831.2,29029.1,29243.3,29474.0,29721.5,29985.7},
	{27782.5,27814.1,27851.2,27894.9,27945.9,28005.2,28073.6,28152.1,28241.4,28342.4,28455.9,28582.5,28723.0,28878.0,29048.0,29233.5,29435.0,29652.8,29887.2,30138.2},
	{28120.4,28148.3,28181.0,28219.5,28264.6,28317.3,28378.4,28448.8,28529.3,28621.0,28724.4,28840.5,28969.9,29113.4,29271.4,29444.6,29633.4,29838.2,30059.4,30297.1},
};

// Magnetic strength data in milli-Gauss * 10
static constexpr const int16_t strength_table_ecl[13][37] {
//    LONGITUDE:  -180, -170, -160, -150, -140, -130, -120, -110, -100,  -90,  -80,  -70,  -60,  -50,  -40,  -30,  -20,  -10,    0,   10,   20,   30,   40,   50,   60,   70,   80,   90,  100,  110,  120,  130,  140,  150,  160,  170,  180,
/* LAT: -60 */ {  6194, 6004, 5804, 5597, 5379, 5145, 4889, 4611, 4318, 4028, 3760, 3531, 3351, 3215, 3116, 3042, 2992, 2971, 2996, 3085, 3251, 3500, 3824, 4208, 4629, 5063, 5484, 5869, 6194, 6444, 6609, 6689, 6692, 6630, 6518, 6369, 6194, },
/* LAT: -50 */ {  5850, 5622, 5391, 5162, 4931, 4687, 4417, 4114, 3785, 3453, 3149, 2908, 2745, 2652, 2603, 2570, 2538, 2512, 2517, 2587, 2757, 3042, 3434, 3903, 4408, 4914, 5390, 5810, 6150, 6393, 6533, 6575, 6534, 6425, 6265, 6068, 5850, },
/* LAT: -40 */ {  5398, 5153, 4910, 4672, 4438, 4202, 3948, 3664, 3350, 3024, 2724, 2500, 2380, 2353, 2372, 2395, 2402, 2392, 2381, 2408, 2533, 2801, 3213, 3723, 4269, 4794, 5263, 5654, 5947, 6136, 6226, 6230, 6161, 6032, 5852, 5635, 5398, },
/* LAT: -30 */ {  4881, 4642, 4405, 4171, 3946, 3728, 3509, 3278, 3023, 2748, 2489, 2305, 2232, 2255, 2322, 2394, 2461, 2514, 2539, 2552, 2615, 2806, 3159, 3642, 4172, 4671, 5094, 5414, 5619, 5720, 5747, 5721, 5642, 5511, 5332, 5117, 4881, },
/* LAT: -20 */ {  4323, 4112, 3905, 3701, 3505, 3323, 3155, 2992, 2815, 2618, 2427, 2291, 2247, 2287, 2375, 2485, 2614, 2745, 2838, 2877, 2900, 2990, 3221, 3599, 4047, 4475, 4827, 5066, 5174, 5183, 5153, 5106, 5023, 4896, 4730, 4534, 4323, },
/* LAT: -10 */ {  3791, 3632, 3480, 3335, 3199, 3079, 2977, 2886, 2790, 2677, 2556, 2455, 2406, 2425, 2508, 2636, 2792, 2953, 3080, 3146, 3162, 3185, 3302, 3548, 3871, 4193, 4460, 4627, 4665, 4614, 4546, 4482, 4393, 4268, 4120, 3957, 3791, },
/* LAT:   0 */ {  3412, 3321, 3238, 3166, 3111, 3073, 3049, 3032, 3010, 2963, 2885, 2789, 2706, 2670, 2707, 2808, 2940, 3077, 3194, 3271, 3304, 3325, 3396, 3549, 3755, 3968, 4149, 4257, 4266, 4200, 4112, 4019, 3907, 3775, 3642, 3519, 3412, },
/* LAT:  10 */ {  3283, 3253, 3234, 3231, 3257, 3305, 3362, 3418, 3455, 3447, 3378, 3263, 3134, 3036, 3005, 3042, 3122, 3220, 3321, 3407, 3471, 3532, 3618, 3734, 3867, 4004, 4124, 4196, 4200, 4140, 4031, 3889, 3727, 3568, 3433, 3338, 3283, },
/* LAT:  20 */ {  3400, 3404, 3432, 3488, 3581, 3703, 3834, 3953, 4036, 4049, 3976, 3834, 3665, 3522, 3442, 3426, 3459, 3530, 3625, 3722, 3812, 3909, 4019, 4130, 4237, 4347, 4448, 4515, 4527, 4471, 4335, 4135, 3908, 3699, 3537, 3437, 3400, },
/* LAT:  30 */ {  3723, 3732, 3789, 3891, 4036, 4208, 4385, 4543, 4653, 4680, 4607, 4451, 4259, 4091, 3982, 3933, 3934, 3982, 4067, 4164, 4260, 4365, 4480, 4598, 4717, 4842, 4961, 5048, 5076, 5021, 4866, 4628, 4355, 4101, 3903, 3776, 3723, },
/* LAT:  40 */ {  4223, 4224, 4292, 4418, 4587, 4776, 4961, 5118, 5223, 5249, 5180, 5030, 4840, 4663, 4532, 4453, 4425, 4444, 4503, 4580, 4665, 4761, 4876, 5009, 5160, 5320, 5471, 5581, 5623, 5571, 5418, 5181, 4907, 4648, 4437, 4294, 4223, },
/* LAT:  50 */ {  4831, 4828, 4888, 5001, 5149, 5310, 5460, 5580, 5653, 5662, 5597, 5468, 5304, 5137, 4998, 4898, 4841, 4827, 4850, 4899, 4967, 5056, 5175, 5324, 5499, 5683, 5850, 5969, 6016, 5975, 5845, 5649, 5424, 5207, 5027, 4899, 4831, },
/* LAT:  60 */ {  5392, 5383, 5415, 5481, 5569, 5664, 5750, 5815, 5847, 5836, 5781, 5685, 5562, 5432, 5312, 5214, 5146, 5111, 5108, 5134, 5190, 5275, 5392, 5539, 5705, 5874, 6022, 6128, 6174, 6154, 6071, 5945, 5797, 5653, 5531, 5442, 5392, },
};

static unsigned
get_lookup_table_index(float *val, float min, float max)
{
	/* for the rare case of hitting the bounds exactly
	 * the rounding logic wouldn't fit, so enforce it.
	 */

	/* limit to table bounds - required for maxima even when table spans full globe range */
	/* limit to (table bounds - 1) because bilinear interpolation requires checking (index + 1) */
	*val = constrain(*val, min, max - SAMPLING_RES);

	return static_cast<unsigned>((-(min) + *val) / SAMPLING_RES);
}

static float
get_table_data(float lat, float lon, const int8_t table[13][37])
{
	/*
	 * If the values exceed valid ranges, return zero as default
	 * as we have no way of knowing what the closest real value
	 * would be.
	 */
	if (lat < -90.0f || lat > 90.0f ||
	    lon < -180.0f || lon > 180.0f) {
		return 0.0f;
	}

	/* round down to nearest sampling resolution */
	float min_lat = int(lat / SAMPLING_RES) * SAMPLING_RES;
	float min_lon = int(lon / SAMPLING_RES) * SAMPLING_RES;

			/* round down to nearest sampling resolution */
	// float min_lat = floorf(lat / SAMPLING_RES) * SAMPLING_RES;
	// float min_lon = floorf(lon / SAMPLING_RES) * SAMPLING_RES;

	/* find index of nearest low sampling point */
	unsigned min_lat_index = get_lookup_table_index(&min_lat, SAMPLING_MIN_LAT, SAMPLING_MAX_LAT);
	unsigned min_lon_index = get_lookup_table_index(&min_lon, SAMPLING_MIN_LON, SAMPLING_MAX_LON);

	const float data_sw = table[min_lat_index][min_lon_index];
	const float data_se = table[min_lat_index][min_lon_index + 1];
	const float data_ne = table[min_lat_index + 1][min_lon_index + 1];
	const float data_nw = table[min_lat_index + 1][min_lon_index];

	/* perform bilinear interpolation on the four grid corners */
	const float lat_scale = constrain((lat - min_lat) / SAMPLING_RES, 0.0f, 1.0f);
	const float lon_scale = constrain((lon - min_lon) / SAMPLING_RES, 0.0f, 1.0f);

	const float data_min = lon_scale * (data_se - data_sw) + data_sw;
	const float data_max = lon_scale * (data_ne - data_nw) + data_nw;

	return lat_scale * (data_max - data_min) + data_min;
}

static float
get_ecl_table_data(float lat, float lon, const int16_t table[13][37])
{
	/*
	 * If the values exceed valid ranges, return zero as default
	 * as we have no way of knowing what the closest real value
	 * would be.
	 */
	if (lat < -90.0f || lat > 90.0f ||
	    lon < -180.0f || lon > 180.0f) {
		return 0.0f;
	}

	// /* round down to nearest sampling resolution */
	// float min_lat = int(lat / SAMPLING_RES) * SAMPLING_RES;
	// float min_lon = int(lon / SAMPLING_RES) * SAMPLING_RES;

		/* round down to nearest sampling resolution */
	float min_lat = floorf(lat / SAMPLING_RES) * SAMPLING_RES;
	float min_lon = floorf(lon / SAMPLING_RES) * SAMPLING_RES;

	/* find index of nearest low sampling point */
	unsigned min_lat_index = get_lookup_table_index(&min_lat, SAMPLING_MIN_LAT, SAMPLING_MAX_LAT);
	unsigned min_lon_index = get_lookup_table_index(&min_lon, SAMPLING_MIN_LON, SAMPLING_MAX_LON);

	const float data_sw = table[min_lat_index][min_lon_index];
	const float data_se = table[min_lat_index][min_lon_index + 1];
	const float data_ne = table[min_lat_index + 1][min_lon_index + 1];
	const float data_nw = table[min_lat_index + 1][min_lon_index];

	/* perform bilinear interpolation on the four grid corners */
	const float lat_scale = constrain((lat - min_lat) / SAMPLING_RES, 0.0f, 1.0f);
	const float lon_scale = constrain((lon - min_lon) / SAMPLING_RES, 0.0f, 1.0f);

	const float data_min = lon_scale * (data_se - data_sw) + data_sw;
	const float data_max = lon_scale * (data_ne - data_nw) + data_nw;

	return lat_scale * (data_max - data_min) + data_min;
}

static unsigned
get_lookup_table_index_SA(float *val, float min, float max)
{
	/* for the rare case of hitting the bounds exactly
	 * the rounding logic wouldn't fit, so enforce it.
	 */

	/* limit to table bounds - required for maxima even when table spans full globe range */
	/* limit to (table bounds - 1) because bilinear interpolation requires checking (index + 1) */
	*val = constrain(*val, min, max - SAMPLING_RES_SA);

	return static_cast<unsigned>((-(min) + *val) / SAMPLING_RES_SA);
}

static float
get_SA_table_data(float lat, float lon, const float_t table[14][20])
{
	/*
	 * If the values exceed valid ranges, return zero as default
	 * as we have no way of knowing what the closest real value
	 * would be.
	 */
	if (lat < -35.0f || lat > -22.0f ||
	    lon < 15.0f || lon > 34.0f) {
		return 0.0f;
	}

	// /* round down to nearest sampling resolution */
	// float min_lat = int(lat / SAMPLING_RES) * SAMPLING_RES;
	// float min_lon = int(lon / SAMPLING_RES) * SAMPLING_RES;

		/* round down to nearest sampling resolution */
	float min_lat = floorf(lat / SAMPLING_RES_SA) * SAMPLING_RES_SA;
	float min_lon = floorf(lon / SAMPLING_RES_SA) * SAMPLING_RES_SA;

	/* find index of nearest low sampling point */
	unsigned min_lat_index = get_lookup_table_index_SA(&min_lat, SAMPLING_MIN_LAT_SA, SAMPLING_MAX_LAT_SA);
	unsigned min_lon_index = get_lookup_table_index_SA(&min_lon, SAMPLING_MIN_LON_SA, SAMPLING_MAX_LON_SA);

	// std::cout<<"min_lat: "<<min_lat_index<<" min_lon: "<<min_lon_index<<"\n";

	// const float data_sw = table[min_lat_index][min_lon_index];
	// const float data_se = table[min_lat_index][min_lon_index + 1];
	// const float data_ne = table[min_lat_index + 1][min_lon_index + 1];
	// const float data_nw = table[min_lat_index + 1][min_lon_index];

	float data_sw = 0.0f;
	float data_se = 0.0f;
	float data_ne = 0.0f;
	float data_nw = 0.0f;

	// Table Edge Handling
	if(min_lat_index>=13 && min_lon_index>=19){
		data_sw = table[min_lat_index][min_lon_index];
		data_se = data_sw;
		data_ne = data_sw;
		data_nw = data_sw;
	}else if(min_lat_index>=13 && min_lon_index<19){
		data_sw = table[min_lat_index][min_lon_index];
		data_se = table[min_lat_index][min_lon_index + 1];
		data_ne = data_se;
		data_nw = data_sw;
	}else if(min_lat_index<13 && min_lon_index>=19){
		data_sw = table[min_lat_index][min_lon_index];
		data_se = data_sw;
		data_nw = table[min_lat_index + 1][min_lon_index];
		data_ne = data_nw;
	}else{
		data_sw = table[min_lat_index][min_lon_index];
		data_se = table[min_lat_index][min_lon_index + 1];
		data_ne = table[min_lat_index + 1][min_lon_index + 1];
		data_nw = table[min_lat_index + 1][min_lon_index];
	}

	/* perform bilinear interpolation on the four grid corners */
	const float lat_scale = constrain((lat - min_lat) / SAMPLING_RES_SA, 0.0f, 1.0f);
	const float lon_scale = constrain((lon - min_lon) / SAMPLING_RES_SA, 0.0f, 1.0f);

	const float data_min = lon_scale * (data_se - data_sw) + data_sw;
	const float data_max = lon_scale * (data_ne - data_nw) + data_nw;

	return (lat_scale * (data_max - data_min) + data_min);
}

float get_mag_declination(float lat, float lon)
{
	// return get_table_data(lat, lon, declination_table);

	// if ((lat >= -35.0f && lat <= -22.0f) &&
	//     (lon >= 15.0f && lon <= 34.0f)) {
	// 	return get_SA_table_data(lat, lon, declination_SA_table);
	// }else{
	// 	return get_ecl_table_data(lat, lon, declination_table_ecl) * 1e-4f * 180.0/M_PI;
	// }

	return get_ecl_table_data(lat, lon, declination_table_ecl) * 1e-4f * 180.0/M_PI;
}

float get_mag_inclination(float lat, float lon)
{
	// return get_table_data(lat, lon, inclination_table);

	// if ((lat >= -35.0f && lat <= -22.0f) &&
	//     (lon >= 15.0f && lon <= 34.0f)) {
	// 	return get_SA_table_data(lat, lon, inclination_SA_table);
	// }else{
	// 	return get_ecl_table_data(lat, lon, inclination_table_ecl) * 1e-4f * 180.0/M_PI;
	// }

	return get_ecl_table_data(lat, lon, inclination_table_ecl) * 1e-4f * 180.0/M_PI;
}

float get_mag_strength(float lat, float lon)
{
	// return get_table_data(lat, lon, strength_table);

	// if ((lat >= -35.0f && lat <= -22.0f) &&
	//     (lon >= 15.0f && lon <= 34.0f)) {
	// 	return get_SA_table_data(lat, lon, strength_SA_table) * 0.001f;
	// }else{
	// 	return get_ecl_table_data(lat, lon, strength_table_ecl) * 0.01f;
	// }

	return get_ecl_table_data(lat, lon, strength_table_ecl) * 0.01f;
}
